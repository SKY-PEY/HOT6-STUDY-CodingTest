// 추후에 md 파일로 재정리 예정

// 그래프의 경우 두 가지 방식으로 구현할 수 있다.
// 1. 인접 행렬(adjacency matrix): 2차원 배열을 사용하는 방식
// 2. 인접 리스트(adjacency list): 연결 리스트를 이용하는 방식

// 방향 및 가중치 여부에 따라 그래프 구조는 조금씩 바뀐다.

// 인접 행렬: 모든 정점들의 연결 여부를 저장해 O(V^2)의 공간을 요구한다.
// - 공간 효율성이 떨어지지만, 두 노드의 연결 여부를 O(1)에 확인할 수 있다.
// 인접 리스트: 연결된 간선의 정보만을 저장하여 O(V + E)의 공간을 요구한다.
// - 공간 효율성이 우수하지만, 두 노드의 연결 여부를 확인하기 위해 O(V)의 시간이 필요하다.

// 인접 행렬
//  - 필요한 메모리: O(V^2)
//  - 연결 여부 확인: O(1)

//  인접 리스트
//  - 필요한 메모리: O(V+E)
//  - 연결 여부 확인: O(V)

// 최단 경로 알고리즘을 구현할 때, 어떤 자료구조가 유용할까?
// 각각 근처의 노드와 연결되어 있는 경우가 많으므로(멀리 있는 노드와 한 번에 연결되기 보다는 타고타고 가는 경우가 많으므로),
// 간선 개수가 적어 인접 리스트가 유리하다.
